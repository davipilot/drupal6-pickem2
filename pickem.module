<?php
// $Id: $

/**
 * @file
 * Enables the sports pickem module.
*/


/*
 * GLOBALS
 */

// Configure pickem-wide timezone.
// @TODO, make timezone league specific.
global $_PICKEM_TIMEZONE;
$_PICKEM_TIMEZONE = variable_get('pickem_time_zone', 'US/Eastern');
// dump this conditional for drupal 7, date_default_timezone_set is php5
if( function_exists('date_default_timezone_set') ) {
  putenv('TZ=' . $_PICKEM_TIMEZONE);
  date_default_timezone_set($_PICKEM_TIMEZONE);
}
else {
  putenv('TZ=' . $_PICKEM_TIMEZONE);
}

global $_PICKEM_MY_LEAGUES;
$_PICKEM_MY_LEAGUES = array();

// Configure scoring engines.
define('PICKEM_TYPE_WIN_LOSS', 0);
define('PICKEM_TYPE_SPREAD', 1);
define('PICKEM_TYPE_SCORE_DIFF', 2);
define('PICKEM_TYPE_WIN_LOSS_TIEBREAK', 3);
global $_PICKEM_SCORING_ENGINES;
$_PICKEM_SCORING_ENGINES = array(
  PICKEM_TYPE_WIN_LOSS => array(
    'type' => 'win_loss',
    'name' => t('Pick the winner'),
    'description' => t('Simply pick the winner of each game.'),
    'include' => 'pickem.scoring.win.loss.inc',
    'features' => array('pick'=>1, 'pick_score'=>0, 'with_spread'=>0, 'with_last_weekly_score'=>0)
  ),
  PICKEM_TYPE_SPREAD => array(
    'type' => 'spread',
    'name' => t('Pick the winner with point spread'),
    'description' => t('Pick the winner of each game based on point spread.'),
    'include' => 'pickem.scoring.spread.inc',
    'features' => array('pick'=>1, 'pick_score'=>0, 'with_spread'=>1, 'with_last_weekly_score'=>0)
  ),
  PICKEM_TYPE_SCORE_DIFF => array(
    'type' => 'score_diff',
    'name' => t('Score differential'),
    'description' => t('Pick the score of each game and get points for correct score differential and winner.'),
    'include' => 'pickem.scoring.score.diff.inc',
    'features' => array('pick'=>0, 'pick_score'=>1, 'with_spread'=>0, 'with_last_weekly_score'=>0)
  ),
  PICKEM_TYPE_WIN_LOSS_TIEBREAK => array(
    'type' => 'win_loss_tiebreak',
    'name' => t('Pick the winner with tie-breaker'),
    'description' => t('Pick the winner of each game and pick the score for the last game to break weekly ties.'),
    'include' => 'pickem.scoring.win.loss.tiebreak.inc',
    'features' => array('pick'=>1, 'pick_score'=>0, 'with_spread'=>0, 'with_last_weekly_score'=>1)
  )
);

// Include utility functions.
require_once 'pickem.inc';


/**
 * Implementation of hook_help().
 */
 function pickem_help($section = "") {
  $output = '';
  switch ($section) {
    case 'pickem/%/mypicks':
      $output .= t('Click on week number to make picks.');
      break;
    case 'admin/pickem':
      $output .= '<p>'. t("Here is some general information regarding how this module is set up.") .'</p><ul>';
      $output .= '<li>'. t("A game set is a collection of teams, weeks, and games.") .'</li>';
      $output .= '<li>'. t("Each league may only have one game set.") .'</li>';
      $output .= '<li>'. t("Each user may be a member of more than one league.") .'</li>';
      $output .= '<li>'. t("The weeks list controls when the pick cut-off occurs.") .'</li>';
      $output .= '</ul>';
      break;
    case 'admin/pickem/games/%':
      $output .= '<p>'. t('In order to add games, you need to have weeks and teams already entered.') .'</p>';
      break;
    case 'admin/pickem/games/%/edit/%':
      $output .= '<p>'. t('Although you may enter scores here, it is easier to use the admin/pickem/leagues screens.  Look for the scores links under leagues.') .'</p>';
      break;
    case 'admin/pickem/leagues':
      $output .= '<p>'. t('Manage your league list.  A league is a group of users who compete against each other.  They will share a standings page, a rules node, and a forum for chatting.') .'</p>';
      break;
    case 'admin/pickem/leagues/edit/%':
      $output .= '<p>'. t('If you want a chat forum and the selection box is empty, you\'ll need to enable the forum module and create a forum first.') .'</p>';
      break;
    case 'admin/pickem/picks':
      $output .= '<p>'. t('Here is where you can override a users picks at the descretion of the commisioner (special circumstances) Choose a league then choose a user and then proceed to the pick set.') .'</p>';
      break;
    case 'admin/pickem/scores/%':
      $output .= '<p>'. t('After each game/week, enter the scores here.  Click on a week number to update scores for that week.') .'</p>';
      break;
    case 'admin/pickem/teams':
      $output .= '<p>'. t('Manage the global team list.  This one table is used for all leagues.') .'</p>';
      $output .= '<p>'. t('NOTE: In most lists the abbrev is used first, but if empty, the name is used.') .'</p>';
      break;
    case 'admin/pickem/weeks':
      $output .= '<p>'. t('Weeks are numbered sequentially, starting at 1.  First Game Time is the field that locks users from changing their picks.  Make sure to fill that one out.<br/>Typical values for NFL would be 1, Week 1, WK1, 2008-11-12 12:00:00, 1') .'</p>';
      break;
    case 'pickem/%/team_power':
      $output .= '<p>'. t('vPower&trade; is a scoring system based on winning percentage, strength of schedule, scoring percentage, and win-streak.  If a good team scores a lot of points against a bad team they get a smaller bonus.  The scale is normalized from 0(worst) to 100(best).') .'</p>';
      break;
  }
  return $output;
}

/**
 * Implementation of hook_init().
 */
function pickem_init() {
  global $_PICKEM_MY_LEAGUES;
  $_PICKEM_MY_LEAGUES = get_my_leagues();

  $stylesheet = drupal_get_path('theme', $GLOBALS['theme_key'] .'/pickem.css');
  if (!file_exists($stylesheet)) {
    $stylesheet = drupal_get_path('module', 'pickem') .'/pickem.css';
  }
  drupal_add_css($stylesheet);
}

/**
 * Implementation of hook_menu().
 */
function pickem_menu() {
  global $user;

  $items = array();
  $items['pickem'] = array(
    'title' => 'Pickem Leagues',
    'page callback' => 'league_router',
    'access arguments' => array('access pickem'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => -10,
  );

  $items['pickem/%league'] = array(
    'page callback' => 'league_page',
    'page arguments' => array(1),
    'access arguments' => array('access pickem'),
    'type' => MENU_CALLBACK,
    'file' => 'pickem.league.page.inc'
  );

  $items['pickem/%league/standings'] = array(
    'page callback' => 'standings_page',
    'page arguments' => array(1),
    'access arguments' => array('access pickem'),
    'type' => MENU_CALLBACK,
    'file' => 'pickem.standings.page.inc'
  );

  $items['pickem/%league/weeklypicks/%week'] = array(
    'title' => t('This Weeks Pick List'),
    'page callback' => 'weeklypicks_page',
    'page arguments' => array(1, 3),
    'access arguments' => array('access pickem'),
    'type' => MENU_CALLBACK,
    'file' => 'pickem.weeklypicks.page.inc'
  );

  $items['pickem/%league/grid'] = array(
    'title' => t('Schedule Grid'),
    'page callback' => 'schedule_grid_page',
    'page arguments' => array(1),
    'access arguments' => array('access pickem'),
    'type' => MENU_CALLBACK,
    'file' => 'pickem.schedule.grid.page.inc'
  );


  if (module_exists("open_flash_chart_api")) {
    $items['pickem/%league/chart1'] = array(
      'title' => t('Weekly High/Low Chart'),
      'page callback' => 'chart_hi_low_page',
      'page arguments' => array(1),
      'access arguments' => array('access pickem'),
      'type' => MENU_CALLBACK,
      'file' => 'pickem.charts.page.inc'
    );
    $items['pickem/%league/chart1/%user'] = array(
      'title' => t('Weekly High/Low Chart'),
      'page callback' => 'chart_hi_low_page',
      'page arguments' => array(1, 3),
      'access arguments' => array('access pickem'),
      'type' => MENU_CALLBACK,
      'file' => 'pickem.charts.page.inc'
    );
    $items['pickem/%league/chart2'] = array(
      'title' => t('Team Pickability'),
      'page callback' => 'chart_team_pickability_page',
      'page arguments' => array(1),
      'access arguments' => array('access pickem'),
      'type' => MENU_CALLBACK,
      'file' => 'pickem.charts.page.inc'
    );
    $items['pickem/%league/chart2/%'] = array(
      'title' => t('Team Pickability'),
      'page callback' => 'chart_team_pickability_page',
      'page arguments' => array(1, 3),
      'access arguments' => array('access pickem'),
      'type' => MENU_CALLBACK,
      'file' => 'pickem.charts.page.inc'
    );
    $items['pickem/%league/chart3/%'] = array(
      'title' => t('Team Points'),
      'page callback' => 'chart_team_scoring_page',
      'page arguments' => array(1, 3),
      'access arguments' => array('access pickem'),
      'type' => MENU_CALLBACK,
      'file' => 'pickem.charts.page.inc'
    );
  }

  $items['pickem/%league/team_stats'] = array(
    'title' => t('Team Stats'),
    'page callback' => 'team_stats_page',
    'page arguments' => array(1),
    'access arguments' => array('access pickem'),
    'type' => MENU_CALLBACK,
    'file' => 'pickem.team.stats.page.inc'
  );

  $items['pickem/%league/team_power'] = array(
    'title' => t('Team vPower Rankings'),
    'page callback' => 'team_power_page',
    'page arguments' => array(1),
    'access arguments' => array('access pickem'),
    'type' => MENU_CALLBACK,
    'file' => 'pickem.team.power.page.inc'
  );

  $items['pickem/%league/mypicks'] = array(
    'page callback' => 'mypicks_all_page',
    'page arguments' => array(1),
    'access arguments' => array('play pickem'),
    'type' => MENU_CALLBACK,
    'file' => 'pickem.mypicks.page.inc'
  );

  $items['pickem/%league/mypicks/%week'] = array(
    'page callback' => 'mypicks_week_page',
    'page arguments' => array(1, 3),
    'access arguments' => array('play pickem'),
    'type' => MENU_CALLBACK,
    'file' => 'pickem.mypicks.page.inc'
  );

  // dynamic logo -> access content
  $items['pickem/random_logo.png'] = array(
    'title' => t('Team Logo'),
    'page callback' => 'stream_logo',
    'access arguments' => array(TRUE),
    'type' => MENU_CALLBACK,
  );



  // admin menus, 'file' => 'pickem.admin.inc',
  $items['admin/pickem'] = array(
    'title' => 'Pickem',
    'description' => t('Run your own pickem leagues.'),
    'page callback' => 'pickem_overview_page',
    'access arguments' => array('administer pickem'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => -10,
    'file' => 'pickem.admin.inc'
  );

  // Global Settings
  $items['admin/pickem/global_settings'] = array(
    'title' => 'Global Settings',
    'description' => t('Configure global pickem settings.  Valid across all leagues.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_settings'),
    'access arguments' => array('administer pickem'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => -10,
    'file' => 'pickem.admin.inc'
  );


  // GAMESETS
  $items['admin/pickem/gamesets'] = array(
    'title' => 'Game Sets',
    'description' => t('Manage the team list and game schedule.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_gamesets_list'),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'weight' => -2,
    'type' => MENU_NORMAL_ITEM
  );
  $items['admin/pickem/gamesets/list'] = array(
    'title' => 'List Game Sets',
    'weight' => -1,
    'type' => MENU_DEFAULT_LOCAL_TASK
  );
  $items['admin/pickem/gamesets/add'] = array(
    'title' => 'Add Game Set',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_gameset_edit', 'add', NULL),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'weight' => 0,
    'type' => MENU_LOCAL_TASK
  );
  $items['admin/pickem/gamesets/import'] = array(
    'title' => 'Import Game Set',
    'description' => t('Load teams and/or game schedules if you are lucky enough to have an import file.'),
    'page callback' => 'page_admin_data_import',
    'access arguments' => array('administer pickem'),
    'weight' => 1,
    'file' => 'pickem.admin.inc',
    'type' => MENU_LOCAL_TASK
  );
  $items['admin/pickem/gamesets/edit/%gameset'] = array(
    'title' => 'Edit Game Set',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_gameset_edit', 'edit', 4),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'type' => MENU_CALLBACK
  );
  $items['admin/pickem/gamesets/export/%gameset'] = array(
    'title' => 'Export Game Set',
    'page callback' => 'export_gameset',
    'page arguments' => array(4),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'type' => MENU_CALLBACK
  );
  $items['admin/pickem/gamesets/delete/%gameset'] = array(
    'title' => 'Delete Game Set',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_gameset_delete_confirm', 4),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'type' => MENU_CALLBACK
  );

  // TEAMS, gets linked into the game sets list
  $items['admin/pickem/teams/%gameset'] = array(
    'title' => 'Teams',
    'description' => t('Manage your global teams list.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_teams_list', 3),
    'access arguments' => array('administer pickem'),
    'weight' => -1,
    'file' => 'pickem.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/pickem/teams/%gameset/list'] = array(
    'title' => 'List Teams',
    'weight' => -1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/pickem/teams/%gameset/add'] = array(
    'title' => 'Add Team',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_team_edit', 'add', 3, NULL),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/pickem/teams/%gameset/edit/%team'] = array(
    'title' => 'Edit Team',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_team_edit', 'edit', 3, 5),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/pickem/teams/%gameset/delete/%team'] = array(
    'title' => 'Delete Team',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_team_delete_confirm', 3, 5),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'type' => MENU_CALLBACK,
  );



  // WEEKS, gets linked into the game sets list
  $items['admin/pickem/weeks/%gameset'] = array(
    'title' => t('Weeks'),
    'description' => t('Manage your weeks.  Used for weekly pick cutoff.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_weeks_list', 3),
    'access arguments' => array('administer pickem'),
    'weight' => 1,
    'file' => 'pickem.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/pickem/weeks/%gameset/list'] = array(
    'title' => 'List Weeks',
    'weight' => -1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/pickem/weeks/%gameset/add'] = array(
    'title' => 'Add Week',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_week_edit', 'add', 3, NULL),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/pickem/weeks/%gameset/edit/%week'] = array(
    'title' => 'Edit Week',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_week_edit', 'edit', 3, 5),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/pickem/weeks/%gameset/delete/%week'] = array(
    'title' => 'Delete Week',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_week_delete_confirm', 3, 5),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'type' => MENU_CALLBACK,
  );


  // GAMES, gets linked into the weeks list
  $items['admin/pickem/games/%week'] = array(
    'title' => t('Games'),
    'description' => t('Manage your games (who plays who).'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_games_list', 3),
    'access arguments' => array('administer pickem'),
    'weight' => -1,
    'file' => 'pickem.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/pickem/games/%week/list'] = array(
    'title' => 'List Games',
    'weight' => -1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/pickem/games/%week/add'] = array(
    'title' => 'Add Game',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_game_edit', 'add', 3, NULL),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/pickem/games/%week/edit/%game'] = array(
    'title' => 'Edit Game',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_game_edit', 'edit', 3, 5),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/pickem/games/%week/delete/%game'] = array(
    'title' => 'Delete Game',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_game_delete_confirm', 3, 5),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'type' => MENU_CALLBACK,
  );


  // LEAGUES
  $items['admin/pickem/leagues'] = array(
    'title' => 'Leagues',
    'description' => t('Manage your leagues and assign users.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_leagues_list'),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'weight' => -2,
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/pickem/leagues/list'] = array(
    'title' => 'List Leagues',
    'weight' => -1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/pickem/leagues/add'] = array(
    'title' => 'Add League',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_league_edit', 'add', NULL),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/pickem/leagues/edit/%league'] = array(
    'title' => 'Edit League',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_league_edit', 'edit', 4),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/pickem/leagues/delete/%league'] = array(
    'title' => 'Delete League',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_league_delete_confirm', 4),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'type' => MENU_CALLBACK,
  );


  // USERS, gets linked into the leagues list
  $items['admin/pickem/users/%league'] = array(
    'title' => t('League User List'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_users_list', 3),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/pickem/users/%league/list'] = array(
    'title' => 'List Users',
    'weight' => -1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/pickem/users/%league/add'] = array(
    'title' => 'Add User',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_users_add', 3),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/pickem/users/%league/remove/%user'] = array(
    'title' => 'Remove User',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_users_remove_confirm', 3, 5),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'type' => MENU_CALLBACK,
  );


  // SCORES, gets linked into the league list
  $items['admin/pickem/scores/%league'] = array(
    'title' => t('Scores List'),
    'description' => t('Enter scores'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_scores_list', 3),
    'access arguments' => array('administer pickem'),
    'weight' => -1,
    'file' => 'pickem.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/pickem/scores/%league/list'] = array(
    'title' => 'Scores List',
    'weight' => -1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/pickem/scores/%league/edit/%week'] = array(
    'title' => 'Edit Scores',
    'description' => t('Enter game scores as they happen.'),
    'page callback' => 'page_admin_scores',
    'page arguments' => array(3, 5),
    'access arguments' => array('administer pickem'),
    'weight' => 1,
    'file' => 'pickem.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/pickem/email_league'] = array(
    'title' => 'Send Email',
    'description' => t('Send mass emails to all pickem user\'s or just league members.'),
    'page callback' => 'page_admin_email_league',
    'access arguments' => array('administer pickem'),
    'weight' => 8,
    'file' => 'pickem.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  // Admin picks
  $items['admin/pickem/picks'] = array(
    'title' => 'Picks',
    'description' => t('Fix user\'s picks.  Will you update a user\'s picks after the cutoff?'),
    'page callback' => 'admin_picks_router',
    'access arguments' => array('administer pickem'),
    'weight' => 1,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'pickem.admin.picks.page.inc'
  );
  $items['admin/pickem/picks/%league'] = array(
    'title' => 'Picks',
    'page callback' => 'admin_picks_router',
    'page arguments' => array(3),
    'access arguments' => array('administer pickem'),
    'weight' => 1,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'pickem.admin.picks.page.inc'
  );
  $items['admin/pickem/picks/%league/%user'] = array(
    'title' => 'Picks',
    'page callback' => 'admin_picks_all_page',
    'page arguments' => array(3, 4),
    'access arguments' => array('administer pickem'),
    'weight' => 1,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'pickem.admin.picks.page.inc'
  );
  $items['admin/pickem/picks/%league/%user/%week'] = array(
    'title' => 'Picks',
    'page callback' => 'admin_picks_week_page',
    'page arguments' => array(3, 5, 4),
    'access arguments' => array('administer pickem'),
    'weight' => 1,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'pickem.admin.picks.page.inc'
  );




  return $items;
}

/**
 * Implementation of hook_user().
 */
function pickem_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'insert':
      // This is for sites that DON't use administrative approval for new accounts.
      $auto_signup = variable_get('pickem_auto_signup_enable', 0);
      $default_league = variable_get('pickem_auto_signup_default_league', 0);
      if ($auto_signup == 1 && $default_league != 0 && $edit['status'] == 1) {
        $query = "insert into {pickem_users} (uid, lid) values(%d, %d)";
        $result = db_query($query, $account->uid, $default_league);
        drupal_set_message($account->name .' added to default pickem league.');
        // Clear the pickem_get_user_totals_* cache so new user will show up in standings.
        cache_clear_all('pickem_get_team_totals_', 'cache', TRUE);
      }
      $edit['pickem_user_email_reminders'] = variable_get('pickem_default_email_reminders', 1);
    break;
    case 'update':
      // This is for sites that use administrative approval for new accounts.
      if ( $account->status == 0 && $edit['status'] == 1 ) {
        // a new user is being added; add them to the default league
        $auto_signup = variable_get('pickem_auto_signup_enable', 0);
        $league = league_load(variable_get('pickem_auto_signup_default_league', 0));
        $is_member = is_league_member($league, $account);
        if (!$is_member && $auto_signup == 1 && $default_league != 0 && $edit['status'] == 1) {
          $query = "insert into {pickem_users} (uid, lid) values(%d, %d)";
          $result = db_query($query, $account->uid, $league->lid);
          drupal_set_message($account->name .' added to default pickem league.');
        }
        $edit['pickem_user_email_reminders'] = variable_get('pickem_default_email_reminders', 1);
        // Clear the pickem_get_user_totals_* cache so new user will show up in standings.
        cache_clear_all('pickem_get_team_totals_', 'cache', TRUE);
      }
      elseif ( $account->status == 1 && $edit['status'] == 0 ) {
        // Clear the pickem_get_user_totals_* cache so new user WON'T show up in standings.
        cache_clear_all('pickem_get_team_totals_', 'cache', TRUE);
      }
    break;
    case 'load':
      // NOTE: this isn't run normally for the logged in user, just users loaded with user_load
      if (! isset($account->pickem_user_email_reminders)) {
        $account->pickem_user_email_reminders = 1;
      }
    break;
    case 'form':
      if ( $category == 'account') {
        $form['pickem'] = array('#type' => 'fieldset',
          '#title' => t('Pickem settings'),
          '#weight' => 5,
          '#collapsible' => TRUE,
        );

        $leagues = get_my_leagues(NULL, $account->uid);
        $options = array();
        foreach ($leagues as $l) {
          $options[$l->lid] = $l->name;
        }

        $form['pickem']['pickem_user_default_league'] = array(
          '#type' => 'select',
          '#title' => t('Default League'),
          '#default_value' => !empty($edit['pickem_user_default_league']) ? $edit['pickem_user_default_league'] : FALSE,
          '#description' => t('Show this league by default.'),
          '#options' => $options,
        );

        $form['pickem']['pickem_user_email_reminders'] = array(
          '#type' => 'checkbox',
          '#title' => t('Receive email reminders'),
          '#default_value' => !empty($edit['pickem_user_email_reminders']) ? $edit['pickem_user_email_reminders'] : FALSE,
          '#description' => t('Enable email reminders to be sent to you if you have not picked the current week\'s games.'),
        );
        return $form;
      }
    break;
  }
}

/**
 * Implementation of hook_perm().
 */
function pickem_perm() {
  return array(
    'administer pickem',
    'play pickem',
    'access pickem'
  );
}

/**
 * Implementation of hook_cron().
 */
function pickem_cron() {
  global $_PICKEM_TIMEZONE;

  $query = 'select pw.wid, pw.wk_firstgame, (UNIX_TIMESTAMP(pw.wk_firstgame) - UNIX_TIMESTAMP(CURDATE())) / 86400 as day_diff, pu.uid, l.lid, count(pp.pid) as picks, count(g.gid) as games FROM {pickem_games} g INNER JOIN {pickem_weeks} pw ON pw.wid=g.wid inner join {pickem_leagues} l on l.gsid=pw.gsid inner join {pickem_users} pu on pu.lid=l.lid left outer join {pickem_picks} pp on pp.uid=pu.uid and pp.lid=l.lid and pp.gid=g.gid where wk_firstgame > CURDATE() group by pw.wid, pw.wk_firstgame, pu.uid, l.lid order by wk_firstgame';
  $result = db_query($query);
  while ($row = db_fetch_object($result)) {
    // send a 0, 1, or 2 day warning
    if ($row->day_diff <= 3 && $row->day_diff >= 0 && $row->picks < $row->games) {
      $user = user_load(array('uid' => $row->uid));
      // send reminder if the user has reminders turned on.
      if ( $user->pickem_user_email_reminders == 1 ) {
        // check to see if they have already been reminded
        $lookup = db_fetch_object(db_query("SELECT id from {pickem_mail} where process_name='%s' and process_point='%s' and uid=%d and lid=%d", 'missing pick warning', 'wid-' . $row->wid . ' days-' . floor($row->day_diff), $row->uid, $row->lid));
        if ( !isset($lookup->id) ) {
          // add row to the pickem_email to prevent dups on next cron run
          db_query("INSERT INTO {pickem_mail} (process_name, process_point, uid, lid, email, sent) VALUES ('%s', '%s', %d, %d, '%s', now())", 'missing pick warning', 'wid-' . $row->wid . ' days-' . floor($row->day_diff), $row->uid, $row->lid, $user->mail);
          // send email
          $nice_date = date('l, F j, Y \a\t g:i a', strtotime($row->wk_firstgame)) .'('. $_PICKEM_TIMEZONE .")";
          email_warning($user, $row->wid, $nice_date, ($row->games - $row->picks) , $row->lid);
        }
      }
    }
  }
}


/**
 * Implementation of hook_theme().
 */
function pickem_theme() {
  return array(

    'league_page' => array(
      'file' => 'pickem.league.page.inc',
      'arguments' => array('league' => NULL),
    ),
    'dash' => array(
      'file' => 'pickem.league.page.inc',
      'arguments' => array('title' => NULL, 'content' => NULL, 'region' => 'main', 'link' => NULL, ),
    ),
    'league_messages' => array(
      'file' => 'pickem.league.page.inc',
      'arguments' => array('league' => NULL),
    ),
    'league_nav' => array(
      'file' => 'pickem.league.page.inc',
      'arguments' => array('league' => NULL),
    ),
    'my_league_summary' => array(
      'file' => 'pickem.league.page.inc',
      'arguments' => array('league' => NULL),
    ),
    'standings' => array(
      'file' => 'pickem.standings.page.inc',
      'arguments' => array('league' => NULL),
    ),
    'mypicks_all' => array(
      'file' => 'pickem.mypicks.page.inc',
      'arguments' => array('league' => NULL),
    ),
    'mypicks_week_form' => array(
      'file' => 'pickem.mypicks.page.inc',
      'arguments' => array('form' => NULL),
    ),
    'admin_picks_all_page' => array(
      'file' => 'pickem.admin.picks.page.inc',
      'arguments' => array('league' => NULL, 'account' => NULL),
    ),
    'admin_picks_week_form' => array(
      'file' => 'pickem.admin.picks.page.inc',
      'arguments' => array('form' => NULL),
    ),
    'pickem_scores_list' => array(
      'file' => 'pickem.admin.inc',
      'arguments' => array('form' => NULL),
    ),
    'pickem_gamesets_list' => array(
      'file' => 'pickem.admin.inc',
      'arguments' => array('form' => NULL),
    ),
    'pickem_leagues_list' => array(
      'file' => 'pickem.admin.inc',
      'arguments' => array('form' => NULL),
    ),
    'pickem_teams_list' => array(
      'file' => 'pickem.admin.inc',
      'arguments' => array('form' => NULL),
    ),
    'pickem_weeks_list' => array(
      'file' => 'pickem.admin.inc',
      'arguments' => array('form' => NULL),
    ),
    'pickem_games_list' => array(
      'file' => 'pickem.admin.inc',
      'arguments' => array('form' => NULL),
    ),
    'pickem_users_list' => array(
      'file' => 'pickem.admin.inc',
      'arguments' => array('form' => NULL),
    ),
    'leaderboard_block' => array(
      'arguments' => array('league' => NULL),
    ),
    'this_weeks_games_block' => array(
      'arguments' => array('league' => NULL),
    ),
    'team_stats' => array(
      'file' => 'pickem.team.stats.page.inc',
      'arguments' => array('league' => NULL),
    ),
    'team_power' => array(
      'file' => 'pickem.team.power.page.inc',
      'arguments' => array('league' => NULL),
    ),
  );
}


/**
 * Go to the user's correct league page.  If they are in more than one,
 * display a list so they can choose.
 */
function league_router() {
  global $_PICKEM_MY_LEAGUES;
  global $user;

  // go to their default league and make sure that they are a member of that league.
  if ( isset($user->pickem_user_default_league) ) {
    $l = league_load($user->pickem_user_default_league);
    if ( is_my_league($l) ) {
      drupal_goto("pickem/" . $user->pickem_user_default_league);
    }
  }

  if ( count($_PICKEM_MY_LEAGUES) >= 1 ) {
    drupal_goto("pickem/" . $_PICKEM_MY_LEAGUES[0]->lid);
  }

  drupal_set_title("Choose League to View");
  $o = get_all_league_switcher();
  print theme('page', $o);
}


/**
 * Theme function for the leaderboard block.
 *
 * @param $league
 *   A fully loaded league object.
 */
function theme_leaderboard_block($league) {
  if ( !isset($league) ) {
    return '';
  }
  $totals = get_user_totals($league); //sorted by overall score
  $content = '<table class="pickem-league-leaders">';
  $how_many = 10;
  $i = 0;
  foreach ($totals as $uid => $tot) {
    $u_name = str_replace(' ', '&nbsp;', $tot['name']);
    $content .= '<tr><td class="score">'. $tot['total'] .'</td><td class="user">' . theme('username', $tot['user_obj']) . '</td></tr>';
    $i++;
    if ( $i >= $how_many ) {
      break;
    }
  }
  $content .= '</table>';
  return $content;
}


/**
 * Theme function for the this week's games block.
 *
 * @param $league
 *   A fully loaded league object.
 */
function theme_this_weeks_games_block($league) {
  $cur_w = get_current_week($league, FALSE);
  if ( $cur_w->wid == "" ) {
    return '';
  }

  $teams = get_teams(array('gameset_id' => $league->gsid));
  $games = get_games(array('week_id' => $cur_w->wid));
  $picked = get_team_totals($league, 'win_lose', $cur_w->wid);

  $content = '<table class="pickem-weeks-games">';
  foreach ($games as $gid => $row) {
      $v_perc = ($picked[$row->v_id]['picked_perc'] <> '') ? '('. $picked[$row->v_id]['picked_perc'] .'%)' : '';
      $h_perc = ($picked[$row->h_id]['picked_perc'] <> '') ? '('. $picked[$row->h_id]['picked_perc'] .'%)' : '';
      $content .= '<tr><td class="score">'. $row->v_score .'</td><td class="team">'. $teams[$row->v_id]->short_name .'&nbsp;'. $v_perc .'</td><td class="team">'. $teams[$row->h_id]->short_name .'&nbsp;'. $h_perc .'</td><td class="score">'. $row->h_score .'</td></tr>';
  }
  $content .= '</table>';
  return $content;
}


/**
 * A callback for a random logo.  Usually used for the site logo at the top.
 *
 * @return
 *   A streamed image with a content type of image/png.
 */
function stream_logo() {
  header("content-type: image/png");

  $full_path = drupal_get_path('module', 'pickem') .'/logos';
  $files = array();
  if ( $dir = opendir($full_path) ) {
    while (false !== ($file = readdir($dir))) {
      if (preg_match("/100\.png$/", "$file")) {
        $files[] = $file;
      }

    }
    closedir($dir);
  }
  print file_get_contents($full_path .'/'. $files[array_rand($files)]);
}


function email_warning($user, $week_id, $firstgame, $missing_picks, $league_id) {

  $headers['Content-Type'] = 'text/plain; charset=UTF-8; format=flowed';
  //$headers['Content-Type'] = 'text/html; charset=UTF-8;';

  $week = week_load($week_id);
  $league = league_load($league_id);

  $subject = $league->name . ': Week '. $week->wk_number .' picks due!';
  $link = check_url(url("pickem/". $league_id ."/picks/". $week->wid, array( 'absolute' => TRUE )));

  $body = "Picks Due Before: $firstgame\n\nJust a reminder, you're missing $missing_picks picks for Week ". $week->wk_number .".\n\n$link";

  $from = variable_get('pickem_commisioner_email', '');
  $headers['From'] = $from;
  //$headers['Bcc'] = $from;

  $to = $user->name .' <'. $user->mail .'>';

  $params = array();
  $params['headers'] = $headers;
  $params['subject'] = $subject;
  $params['body'] = $body;

  // $module, $key, $to, $language, $params = array(), $from = NULL, $send = TRUE
  $message = drupal_mail('email_warning', 'notice', $to, language_default(), $params);
  if ($message['result'] != 1) {
    watchdog('pickem', 'Error Sending '.  $user->name .": Week ". $week->wk_name ." Warning");
  }

}

/**
 * implementation of hook_mail().
 */
function email_warning_mail($key, &$message, $params) {
  switch ($key) {
    case 'notice':
      $message['headers'] = $params['headers'];
      $message['subject'] = $params['subject'];
      $message['body'] = $params['body'];
      break;
  }
}

/**
 * Requires the jstimer module.
 */
function get_countdown_timer($current_week) {
  $o = '';
  if (module_exists("jstimer")) {
    $o .= "Reminder: Week {$current_week->wk_number} picks due in ";
    $o .=  theme('jstimer', 'jst_timer', array(
             'datetime' => $current_week->firstgame_xml,
             'format_txt' => '%days% days + %hours%:%mins%:%secs%(%dow%)'
           ));
  }
  return $o;
}

function pickem_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      // If $op is "list", we just need to return a list of block descriptions.
      // This is used to provide a list of possible blocks to the administrator,
      // end users will not see these descriptions.
      // A block can provide default settings.
      $blocks[0] = array(
        'info'       => t('Pickem Leagues'),
        'visibility' => 1,
        'pages'      => 'pickem/*'
      );
      $blocks[1] = array(
        'info'       => t('Pickem Leaderboard'),
        'visibility' => 2,
        'pages'      => "<?php return (arg(0)=='pickem' && is_numeric(arg(1)) && arg(2)=='')?TRUE:FALSE;?>",
        'cache' => BLOCK_NO_CACHE
      );
      $blocks[2] = array(
        'info'       => t('Pickem This Weeks Games'),
        'visibility' => 2,
        'pages'      => "<?php return (arg(0)=='pickem' && is_numeric(arg(1)) && arg(2)=='')?TRUE:FALSE;?>",
        'cache' => BLOCK_NO_CACHE
      );
      return $blocks;
    case 'configure':
      // If $op is "configure", we need to provide the administrator with a
      // configuration form. The $delta parameter tells us which block is being
      // configured. In this example, we'll allow the administrator to customize
      // the text of the first block.
      $form = array();
      if ($delta == 0) {
        // All we need to provide is a text field, Drupal will take care of
        // the other block configuration options and the save button.
        //$form['block_example_string'] = array(
        //  '#type' => 'textfield',
        //  '#title' => t('Block contents'),
        //  '#size' => 60,
        //  '#description' => t('This string will appear in the example block.'),
        //  '#default_value' => variable_get('block_example_string',  t('Some example content.')),
        //);
      }
      return $form;
    case 'save':
      // If $op is "save", we need to save settings from the configuration form.
      // Since the first block is the only one that allows configuration, we
      // need to check $delta to make sure we only save it.
      //if ($delta == 0) {
        // Have Drupal save the string to the database.
      //  variable_set('block_example_string', $edit['block_example_string']);
      //}
      //return;
    case 'view': default:
      switch ($delta) {
        case 0:
          $block['subject'] = t('My Leagues');
          $block['content'] = get_my_league_switcher();
          break;
        case 1:
          $block['subject'] = t('Leaderboard');
          $league = league_load(arg(1));
          $block['content'] = theme('leaderboard_block', $league);
          break;
        case 2:
          $league = league_load(arg(1));
          $cur_w = get_current_week($league, FALSE);
          $block['subject'] = 'Games(week '. $cur_w->wk_number .')';
          $league = league_load(arg(1));
          $block['content'] = theme('this_weeks_games_block', $league);
      }
      return $block;
  }
}

/**
 * Used by My Leagues Block
 */
function get_my_league_switcher() {
  $leagues = get_my_leagues();
  return league_switcher($leagues);
}

/**
 * Used by league_router for anonymous and non-league memebers.
 */
function get_all_league_switcher() {
  $leagues = get_leagues();
  return league_switcher($leagues);
}

function league_switcher($leagues = NULL) {
  if ( count($leagues) < 2 ) {
    return '';
  }

  $o = '';
  $list = explode('/', $_GET['q']);
  $path ='';
  if ( count($list) > 2 ) {
    // discard first two items(pickem/lid) and save remaining items back into path
    array_shift($list);
    array_shift($list);
    $path = '/' . implode('/', $list);
  }

  foreach ($leagues as $l) {
    if ( arg(1) == $l->lid ) {
      $o .= '* ';
    }
    $o .= l($l->name, 'pickem/'. $l->lid);
    if ( $path != '' ) {
      $o .= ' '. l('/--&gt;', 'pickem/'. $l->lid . $path, array('html' => TRUE));
    }
    $o .= '<br/>';
  }
  return $o;
}


/**
 * Good General Use Forms
 */
function league_select_form($form_state=NULL) {
  $options = array();
  $leagues = get_leagues();
  foreach ($leagues as $lid => $l) {
    $options[$lid] = $l->name;
  }

  $form['league_select'] = array( '#type' => 'select', '#title' => t('Select League'), '#default_value' => 1, '#options' => $options);
  $form['op'] = array(
    '#type' => 'button',
    '#value' => t('Choose')
  );
  return $form;
}


function user_select_form($form_state=NULL, $league=NULL, $title='Select User To Modify', $not_in_league=0) {

  $users = get_users($league, $not_in_league);
  $user_list = array();
  foreach ($users as $u_id => $user_data) {
    $user_list[$u_id] = $user_data->name;
  }

  $form = array();
  $form['user_select'] = array(
    '#type' => 'select',
    '#title' => t($title),
    '#default_value' => 1,
    '#options' => $user_list,
  );
  $op = explode(' ', $title);
  $form['op'] = array(
    '#type' => 'button',
    '#value' => t($op[0])
  );
  return $form;
}
