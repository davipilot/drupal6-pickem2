<?php
// $Id: pickem.module,v 1.1.2.4 2008/09/22 18:20:32 jvandervort Exp $

/**
 * @file
 * pickem module allows you to run a pickem league.
*/
 
putenv("TZ=US/Eastern");

require_once 'pickem.inc';

$_pickem_my_leagues = array();

/**
 * Implementation of hook_help().
 */
 function pickem_help($section = "") {
  switch ($section) {
    case 'admin/modules#description' :
      return t("A drupal module for nfl pickem style board.");
    case 'admin/content/pickem':
      return '<p>'. t('Here is where you administer all pickem leagues.  Use the tabs above to perform various league functions.<br/>Each pickem user can belong to multiple leagues and will have separate pick sets per league.<br/>All Leagues share the same games currently (same DB table).  You\'ll need to run a separate site if you want to run NFL at the same time as NHL.') .'</p>';
    case 'admin/content/pickem/league_users':
      return '<p>'. t('A league is a group of users who compete against each other.  Select a league and then proceed to its user list.'.'</p>');
  }
}

/*
 * Implementation of hook_init().
*/
function pickem_init() {
  //drupal_set_message('pickem_init');
  
  // fix menus when they crash in the middle
  //menu_rebuild();  
  
  global $_pickem_my_leagues;
  $_pickem_my_leagues = get_my_leagues();
  
  $stylesheet = drupal_get_path('theme', $GLOBALS['theme_key'] .'/pickem.css');
  if (!file_exists($stylesheet)) {
    $stylesheet = drupal_get_path('module', 'pickem') .'/pickem.css';
  }
  drupal_add_css($stylesheet);
}

/*
 * Implementation of hook_menu().
*/
function pickem_menu() {
  global $user;
  global $_pickem_my_leagues;

  $items = array();

  $items['pickem'] = array(
    'title' => t('Pickem'), 
    'page callback' => 'page_my_leagues', 
    'access arguments' => array('play pickem'), 
    'type' => MENU_NORMAL_ITEM,
  );



  $items['pickem/%league'] = array(
    'page callback' => 'page_league', 
    'page arguments' => array(1),
    'access arguments' => array('play pickem'),
    'type' => MENU_CALLBACK,
  );

  // arg1 is league id
  $items['pickem/%league/mypicks'] = array(
    'page callback' => 'page_mypicks_all', 
    'page arguments' => array(1),
    'access arguments' => array('play pickem'),
    'type' => MENU_CALLBACK,
  );


  // arg1 is league id, arg2 is weeknum
  $items['pickem/%league/mypicks/%'] = array(
    'page callback' => 'page_mypicks_week', 
    'page arguments' => array(1, 3),
    'access arguments' => array('play pickem'),
    'type' => MENU_CALLBACK,
  );

  $items['pickem/%league/standings'] = array(
    'page callback' => 'page_standings', 
    'page arguments' => array(1),
    'access arguments' => array('play pickem'),
    'type' => MENU_CALLBACK,
  );

  $items['pickem/%league/weeklypicks/%'] = array(
    'title' => t('This Weeks Pick List'), 
    'page callback' => 'page_weeklypicks', 
    'page arguments' => array(1, 3),
    'access arguments' => array('play pickem'),
    'type' => MENU_CALLBACK,
  );


  // lower level permissions
  $items['pickem/grid'] = array(
    'title' => t('Schedule Grid'), 
    'page callback' => 'page_grid', 
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );


  if (module_exists("open_flash_chart_api")) {
    // arg1 is league id
    $items['pickem/%league/chart1'] = array(
      'title' => t('Weekly High/Low Chart'), 
      'page callback' => 'chart1', 
      'page arguments' => array(1),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    );
    // arg1 is league id
    $items['pickem/%league/chart1/%user'] = array(
      'title' => t('Weekly High/Low Chart'), 
      'page callback' => 'chart1', 
      'page arguments' => array(1, 3),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    );
  
    $items['pickem/%league/chart2'] = array(
      'title' => t('Team Pickability'), 
      'page callback' => 'chart2', 
      'page arguments' => array(1),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    );
    $items['pickem/%league/chart2/%'] = array(
      'title' => t('Team Pickability'), 
      'page callback' => 'chart2', 
      'page arguments' => array(1, 3),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    );
  }

  // dynamic logo
  $items['pickem/logos.gif'] = array(
    'title' => t('Team Logo'), 
    'page callback' => 'stream_logo', 
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,    
  );

  $items['pickem/team_stats'] = array(
    'title' => t('Team Stats'), 
    'page callback' => 'page_team_stats', 
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,    
  );




  //
  //
  //admin menus, 'file' => 'pickem_admin.inc',
  //
  //
  $items['admin/content/pickem'] = array(
    'title' => t('Pickem Leagues'),
    'description' => t('Run your own pickem league(s)'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_admin_settings'),
    'access arguments' => array('administer pickem'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'pickem_admin.inc',
  );    

  $items['admin/content/pickem/leagues'] = array(
    'title' => t('Leagues'), 
    'page callback' => 'page_admin_leagues', 
    'access arguments' => array('administer pickem'),
    'weight' => 1,
    'file' => 'pickem_admin.inc',
    'type' => MENU_LOCAL_TASK, 
  );

  $items['admin/content/pickem/league_users'] = array(
    'title' => t('League Users'), 
    'page callback' => 'page_admin_leagues_users', 
    'access arguments' => array('administer pickem'),
    'weight' => 2,
    'file' => 'pickem_admin.inc',
    'type' => MENU_LOCAL_TASK, 
  );

  $items['admin/content/pickem/league_users/%league'] = array(
    'title' => t('League User Admin'), 
    'page callback' => 'page_admin_league_users', 
    'page arguments' => array(4),
    'access arguments' => array('administer pickem'),
    'weight' => 2,
    'file' => 'pickem_admin.inc',
    'type' => MENU_LOCAL_TASK, 
  );
  
  $items['admin/content/pickem/picks'] = array(
    'title' => t('Picks'), 
    'page callback' => 'page_admin_picks', 
    'access arguments' => array('administer pickem'),
    'weight' => 3,
    'file' => 'pickem_admin.inc',
    'type' => MENU_LOCAL_TASK, 
  );
  $items['admin/content/pickem/games'] = array(
    'title' => t('Games'), 
    'page callback' => 'page_admin_games', 
    'access arguments' => array('administer pickem'),
    'weight' => 4,
    'file' => 'pickem_admin.inc',
    'type' => MENU_LOCAL_TASK, 
  );
  $items['admin/content/pickem/scores'] = array(
    'title' => t('Scores'), 
    'page callback' => 'page_admin_scores', 
    'access arguments' => array('administer pickem'),
    'weight' => 5,
    'file' => 'pickem_admin.inc',
    'type' => MENU_LOCAL_TASK, 
  );
  $items['admin/content/pickem/weeks'] = array(
    'title' => t('Weeks'), 
    'page callback' => 'page_admin_weeks', 
    'access arguments' => array('administer pickem'),
    'weight' => 6,
    'file' => 'pickem_admin.inc',
    'type' => MENU_LOCAL_TASK, 
  );
  $items['admin/content/pickem/teams'] = array(
    'title' => t('Teams'), 
    'page callback' => 'page_admin_teams', 
    'access arguments' => array('administer pickem'),
    'weight' => 7,
    'file' => 'pickem_admin.inc',
    'type' => MENU_LOCAL_TASK, 
  );
  $items['admin/content/pickem/email_league'] = array(
    'title' => t('Email League'), 
    'page callback' => 'page_admin_email_league', 
    'access arguments' => array('administer pickem'),
    'weight' => 8,
    'file' => 'pickem_admin.inc',
    'type' => MENU_LOCAL_TASK, 
  );

  $items['admin/content/pickem/import'] = array(
    'title' => t('Import Data'), 
    'page callback' => 'page_admin_data_import', 
    'access arguments' => array('administer pickem'),
    'weight' => 9,
    'file' => 'pickem_admin.inc',
    'type' => MENU_LOCAL_TASK, 
  );
  
  return $items;
}
 
/**
 * Implementation of hook_user().
 */
function pickem_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'insert':
      // a new user is being added; add them to the default league
      $auto_signup = variable_get('pickem_auto_signup_enable', 0);
      $default_league = variable_get('pickem_auto_signup_default_league', 0);
      if (  $auto_signup == 1 && $default_league != 0 ) {
        $query = "insert into {pickem_users} (uid, lid) values(%d, %d)";
        $result = db_query($query, $account->uid, $default_league);
        drupal_set_message($account->name .' added to default pickem league.');
      }
      $edit['pickem_email_reminders'] = variable_get('pickem_default_email_reminders', 1);
    break;
    case 'form':
    	if ( $category == 'account') {
		    $form['pickem'] = array('#type' => 'fieldset',
		      '#title' => t('Pickem settings'),
		      '#weight' => 5,
		      '#collapsible' => TRUE,
		    );

        $leagues = get_my_leagues();
        $options = array();
        foreach ($leagues as $l) {
          $options[$l->lid] = $l->name; 
        }
		    $form['pickem']['pickem_user_default_league'] = array(
		      '#type' => 'select',
		      '#title' => t('Default League'),
		      '#default_value' => !empty($edit['pickem_user_default_league']) ? $edit['pickem_user_default_league'] : FALSE,
		      '#description' => t('Show this league by default.'),
		    );
		    
		    
		    
		    $form['pickem']['pickem_email_reminders'] = array('#type' => 'checkbox',
		      '#title' => t('Receive email reminders'),
		      '#default_value' => !empty($edit['pickem_email_reminders']) ? $edit['pickem_email_reminders'] : FALSE,
		      '#description' => t('Enable email reminders to be sent to you if you have not picked the current weeks games.'),
		    );
	    	return $form;
    	}
    break;
  }
}

/**
 * Implementation of hook_perm().
 */
function pickem_perm() {
  return array(
    'administer pickem',
    'play pickem'
  );
}

/**
 * Implementation of hook_cron().
 */
function pickem_cron() {
  $row = db_fetch_object(db_query("SELECT pw.wid,pw.wk_firstgame, UNIX_TIMESTAMP(pw.wk_firstgame) - UNIX_TIMESTAMP(CURDATE()) as diff FROM {pickem_weeks} pw where wk_firstgame > CURDATE() order by wk_firstgame"));
  $wid = $row->wid;
  $days = ($row->diff) / 86400; #days
  $firstgame = $row->wk_firstgame;

  if ($days <= 2 && $days > 0) {
    $query = 'select pu.lid, u.uid, u.mail, u.name, count(pp.pid) picks, count(pg.gid) games, pg.wid from {users} u inner join {pickem_users} pu on pu.uid=u.uid left outer join {pickem_picks} pp on pp.uid=u.uid and pp.lid=pu.lid right outer join {pickem_games} pg on pg.gid=pp.gid where pg.wid=%d group by pu.lid, u.uid, u.mail, u.name';
    $result = db_query($query, $wid);
    while ($row = db_fetch_object($result)) {
      $missing_count = $row->games - $row->picks;
      if ( $missing_count > 0 ) {
        $user = user_load($row->uid);
        if ( $user->pickem_email_reminder == 1 ) {
        	email_warning($user, $row->wid, $firstgame, $missing_count, $row->lid);
        }
      }      
    }
  }
}




/**
 * Implementation of hook_theme()
 */
function pickem_theme() {
  return array(
    'admin_leagues_form' => array(
      'file' => 'pickem_admin.inc',
      'arguments' => array('form' => NULL),
    ),
    'admin_teams_form' => array(
      'file' => 'pickem_admin.inc',
      'arguments' => array('form' => NULL),
    ),
    'admin_weeks_form' => array(
      'file' => 'pickem_admin.inc',
      'arguments' => array('form' => NULL),
    ),
    'admin_games_form' => array(
      'file' => 'pickem_admin.inc',
      'arguments' => array('form' => NULL),
    ),
    'league_nav' => array(
      'arguments' => array('league' => NULL, 'multileague' => 'no'),
    ),
    'league_messages' => array(
      'arguments' => array('league' => NULL),
    ),
    'league_leaders' => array(
      'arguments' => array('league' => NULL),
    ),
    'this_weeks_games' => array(
      'arguments' => array(),
    ),
    'this_weeks_games_scrape' => array(
      'arguments' => array(),
    ),
    'dash' => array(
      'arguments' => array('title' => NULL, 'content' => NULL, 'region' => 'main', 'link' => NULL, ),
    ),
    'team_stats' => array(
      'arguments' => array(),
    ),
  );
}


/* 
 * Menu Callbacks
 */
function page_grid($cache_reset = TRUE) {
  drupal_set_title("NFL Schedule Grid");

  $output = '';
  
  if (!$cache_reset && ($cache = cache_get('pickem_grid_scores')) && !empty($cache->data)) {
    $output = unserialize($cache->data);
  } 
  else {
    $weeks = get_weeks();
    $week_row = '';
    foreach ($weeks as $w => $w_data) {
      $week_row .= '<th>'. $w .'</th>';
    }
    
    $flip = array('even' => 'odd', 'odd' => 'even');
    $class1 = 'even';
  
    $query = "SELECT g.gid, g.wid, h.tm_abbrev as home, v.tm_abbrev as visitor, g.h_score, g.v_score FROM {pickem_games} g inner join {pickem_teams} h on h.tid=g.h_id inner join {pickem_teams} v on v.tid=g.v_id order by wid";
    $result = db_query($query);
  
    $games = array();
    while ($row = db_fetch_object($result)) {
      if ($row->h_score > $row->v_score) {
        // Home Victory
        $games[$row->home][$row->wid] = array(
          "op" => $row->visitor,
          "w-l" => "win",
          "h-a" => "home",
          "score" => $row->h_score .'-'. $row->v_score
        );
        $games[$row->visitor][$row->wid] = array(
          "op" => $row->home,
          "w-l" => "loss",
          "h-a" => "away",
          "score" => $row->v_score .'-'. $row->h_score
        );
      }
      elseif ($row->v_score > $row->h_score) {
        // Visitor Victory
        $games[$row->home][$row->wid] = array(
          "op" => $row->visitor,
          "w-l" => "loss",
          "h-a" => "home",
          "score" => $row->h_score .'-'. $row->v_score
        );
        $games[$row->visitor][$row->wid] = array(
          "op" => $row->home,
          "w-l" => "win",
          "h-a" => "away",
          "score" => $row->v_score .'-'. $row->h_score
        );
      }
      elseif ($row->v_score == $row->h_score && $row->h_score <> "") {
        // TIE
        $games[$row->home][$row->wid] = array(
          "op" => $row->visitor,
          "w-l" => "tie",
          "h-a" => "home",
          "score" => $row->h_score .'-'. $row->v_score
        );
        $games[$row->visitor][$row->wid] = array(
          "op" => $row->home,
          "w-l" => "tie",
          "h-a" => "away",
          "score" => $row->v_score .'-'. $row->h_score
        );
      } 
      else {
        // TBD, game not played  
        $games[$row->home][$row->wid] = array(
          "op" => $row->visitor,
          "w-l" => "tbd",
          "h-a" => "home",
          "score" => 'N/A'
        );
        $games[$row->visitor][$row->wid] = array(
          "op" => $row->home,
          "w-l" => "tbd",
          "h-a" => "away",
          "score" => 'N/A'
        );
      }
    }
  
    ksort($games);
  
    $output = '<div class="pickem">Hover over completed game for the score.<table class="grid">';
    $output .= '<tr><th>&nbsp;</th>'. $week_row .'</tr>';
    foreach ($games as $tm => $teamsgames) {
      ksort($teamsgames);
      $class1 = $flip[$class1];
      $output .= '<tr class="'. $class1 .'"><th>'. $tm .'</th>';
      foreach ($weeks as $w => $w_data) {
        $class = "";
        if (isset ($teamsgames[$w])) {
          $class .= $teamsgames[$w]["h-a"];
          $class .= " ". $teamsgames[$w]["w-l"];
          if ($teamsgames[$w]["h-a"] == "away") {
            $teamsgames[$w]["op"] = '@'. $teamsgames[$w]["op"];
          }
          $output .= "<td class=\"$class\" title=\"". $teamsgames[$w]["score"] ."\">". $teamsgames[$w]["op"] ."</td>";
        } 
        else {
          if ($w_data->playoffs == 1) {
            $output .= '<td>&nbsp;</td>';
          } 
          else {
            $output .= '<td class="bye">bye</td>';
          }
        }
      }
      $output .= "</tr>";
    }
    $output .= '<tr><th>&nbsp;</th>'. $week_row .'</tr></table>';
    
    $output .= '<table class="grid">';
    $output .= '<tr><th class="legend-desc">Legend</th></tr>';
    $output .= '<tr><td class="win">CLE</td><td class="legend-desc">Win (for team in the first column)</td></tr>';
    $output .= '<tr><td class="loss">DAL</td><td class="legend-desc">Loss (for team in the first column)</td></tr>';
    $output .= '<tr><td class="tie">SEA</td><td class="legend-desc">Tie</td></tr>';
    $output .= '<tr><td class="tbd">DEN</td><td class="legend-desc">Not Yet Played</td></tr>';
    $output .= '<tr><td class="bye">bye</td><td class="legend-desc">Bye</td></tr>';
  
    $output .= '</table></div>';

    cache_set('pickem_grid_scores', serialize($output));
  }


  print theme('page', $output);
}

function page_mypicks_week($league, $week_num='') {
  //drupal_set_message('page_mypicks_week');

  global $_pickem_my_leagues;
  global $user;
  
  $flip = array('even' => 'odd', 'odd' => 'even');
  $class = 'even';
  
  $week = get_weeks($week_num);
  
  //POSTING, save picks
  if (count($_POST) > 0) {
    if ($week[$week_num]['week_past'] == 1) {
      drupal_set_title($week[$week_num]['name'] .' picks are locked.');
      print theme('page', "You cannot change your picks now.");
      return;
    }

    $type = "";
    if ( isset($_POST['apply_to_all_my_leagues'] ) ) {
      unset($_POST['apply_to_all_my_leagues']);
      foreach ($_pickem_my_leagues as $l) {
        foreach ($_POST as $gid => $pick) {
          $gid = preg_split('/_/', $gid);
          set_pick($gid[1], $user->uid, $l->lid, $pick);
        }
      }
      drupal_set_message("Picks saved for all leagues");

    } 
    else {
      foreach ($_POST as $gid => $pick) {
        $gid = preg_split('/_/', $gid);
        set_pick($gid[1], $user->uid, $league->lid, $pick);
      }
      drupal_set_message("Picks Saved");
    }
  }


  // SINGLE WEEK VIEW
  $teams = get_teams();
  if (is_numeric($week_num)) {
    drupal_set_title("Week $week_num Picks - ". $user->name);
    $query = "SELECT g.gid, g.wid, g.h_score, g.v_score, g.v_id, g.v_spread, g.h_id, g.h_spread, pp.winnerpick_id, g.gametime FROM {pickem_games} g LEFT OUTER JOIN {pickem_picks} pp ON pp.gid = g.gid and pp.uid=%d and pp.lid=%d where g.wid=%d ORDER BY g.wid, g.gametime, g.gid";
    $result = db_query($query, $user->uid, $league->lid, $week_num);
    $games = array();
    while ($row = db_fetch_object($result)) {
      $games[$row->wid][$row->gid] = array(
        "hid" => $row->h_id,
        "h_spread" => $row->h_spread,
        "vid" => $row->v_id,
        "v_spread" => $row->v_spread,
        "pick" => $row->winnerpick_id,
        "gametime" => $row->gametime
      );
    }
    $output = '<div class="pickem"><form action="" method="post"><table class="picks">';
    if ($league->scoring_type == 0) {
      $output .= "<tr><th>Visitor</th><th>Home</th><th>Game Time(EST)</th></tr>";
    } 
    else if ($league->scoring_type == 1) {
      $output .= "<tr><th>Visitor</th><th>VSpread</th><th>Home</th><th>HSpread</th><th>Game Time(EST)</th></tr>";
    }
    foreach ($games as $wid => $weeksgames) {
      foreach ($weeksgames as $gid => $game) {
        $v_sel = "";
        $h_sel = "";
        if ($game["pick"] == $game["vid"]) {
          $v_sel = "checked";
        }
        elseif ($game["pick"] == $game["hid"]) {
          $h_sel = "checked";
        }
        
        if ($week[$week_num]['week_past'] == 0) {
          $output .= '<tr>';
          $output .= '<td><input type="radio" name="gid_'. $gid .'" value="'. $game["vid"] .'" '. $v_sel .'/>'. $teams[$game["vid"]]->tm_abbrev .'</td>';
          if ($league->scoring_type == 1) {
            $output .= '<td>'. $game['v_spread'] .'</td>';
          }
          $output .= '<td><input type="radio" name="gid_'. $gid .'" value="'. $game["hid"] .'" '. $h_sel .'/>'. $teams[$game["hid"]]->tm_abbrev .'</td>';
          if ($league->scoring_type == 1) {
            $output .= '<td>'. $game['h_spread'] .'</td>';  
          }
        } 
        else {
          $output .= '<tr>'; 
          if ($game["pick"] == $game["vid"]) {
            $output .= '<td><input name="checkbox1" type="checkbox" value="checkbox" onclick="return false" checked/>'. $teams[$game["vid"]]->tm_abbrev .'</td>';
            if ($league->scoring_type == 1) {
              $output .= '<td>'. $game['v_spread'] .'</td>';  
            }
          } 
          else {
            $output .= '<td>'. $teams[$game["vid"]]->tm_abbrev .'</td>';
            if ($league->scoring_type == 1) {
              $output .= '<td>'. $game['v_spread'] .'</td>';  
            }
          }

          if ($game["pick"] == $game["hid"]) {
            $output .= '<td><input name="checkbox1" type="checkbox" value="checkbox" onclick="return false" checked/>'. $teams[$game["hid"]]->tm_abbrev .'</td>';
            if ($league->scoring_type == 1) {
              $output .= '<td>'. $game['h_spread'] .'</td>';  
            }
          } 
          else {
            $output .= '<td>'. $teams[$game["hid"]]->tm_abbrev .'</td>';
            if ($league->scoring_type == 1) {
              $output .= '<td>'. $game['h_spread'] .'</td>';  
            }
          }
        }
        if (isset ($game["pick"])) {
          $output .= '<td class="pick">'. $game['gametime'] .'</td></tr>';
        } 
        else {
          $output .= '<td class="nopick">'. $game['gametime'] .'</td></tr>';
        }
      }
    }
    $output .= '</table>';
    
    if ($week[$week_num]['week_past'] == 0 ) {
      if ( count($_pickem_my_leagues) > 1 ) {
        $output .= '<input type="checkbox" name="apply_to_all_my_leagues">Apply picks to all my leagues<br/><br/>';
      }
      $output .= '<input type="submit" value="Save Picks"/>';
    }
    $output .= '</form></div>';
  } 

  print theme('page', $output);
}

function page_mypicks_all($league) {
//  drupal_set_message('page_mypicks_all');
  global $_pickem_my_leagues;
  global $user;
  drupal_set_title("My Picks - ". $user->name);
  
  $flip = array('even' => 'odd', 'odd' => 'even');
  $class = 'even';
  
  $teams = get_teams();

  // SHOW ALL WEEKS VIEW
  $games = array();

  // two parts query so current week is always ontop, and passed weeks are at the bottom.
  $query = "select g.gid, g.wid, g.h_score, g.v_score, g.v_id, g.h_id, pp.winnerpick_id, g.gametime from {pickem_games} g inner join {pickem_weeks} w on w.wid=g.wid left outer join {pickem_picks} pp on pp.gid = g.gid and pp.uid=%d and pp.lid=%d where w.wk_firstgame > now() order by g.wid, g.gametime, g.gid";
  $result = db_query($query, $user->uid, $league->lid);
  while ($row = db_fetch_object($result)) {
    $games[$row->wid][$row->gid] = array(
      "hid" => $row->h_id,
      "vid" => $row->v_id,
      "pick" => $row->winnerpick_id,
      "vscore" => $row->v_score,
      "hscore" => $row->h_score,
      "gametime" => $row->gametime
    );
  }
  
  $query = "select g.gid, g.wid, g.h_score, g.v_score, g.v_id, g.h_id, pp.winnerpick_id, g.gametime from {pickem_games} g inner join {pickem_weeks} w on w.wid=g.wid left outer join {pickem_picks} pp on pp.gid = g.gid and pp.uid=%d and pp.lid=%d where w.wk_firstgame < now() order by g.wid, g.gametime, g.gid";
  $result = db_query($query, $user->uid, $league->lid);
  while ($row = db_fetch_object($result)) {
    $games[$row->wid][$row->gid] = array(
      "hid" => $row->h_id,
      "vid" => $row->v_id,
      "pick" => $row->winnerpick_id,
      "vscore" => $row->v_score,
      "hscore" => $row->h_score,
      "gametime" => $row->gametime
    );
  }

  $output = '<div class="pickem">Click on week number to make picks.<table class="picks">';
  foreach ($games as $wid => $weeksgames) {
    $class = $flip[$class];      
    $output .= '<tr class="'. $class .'"><th>'. l("$wid", "pickem/$league->lid/mypicks/$wid") .'</th><td>';
    foreach ($weeksgames as $gid => $game) {
      $output .= '<div class="picks-float">';
      if (isset ($teams[$game["pick"]]->tm_abbrev)) {
        if ($game["pick"] == $game["vid"] && $game["vscore"] > $game["hscore"]) {
          $output .= '<span class="pick_win">'. $teams[$game["vid"]]->tm_abbrev .'</span><br/>@'. $teams[$game["hid"]]->tm_abbrev;
        }
        elseif ($game["pick"] == $game["hid"] && $game["hscore"] > $game["vscore"]) {
          $output .= $teams[$game["vid"]]->tm_abbrev .'<br/>@<span class="pick_win">'. $teams[$game["hid"]]->tm_abbrev .'</span>';
        }
        elseif ($game["hscore"] <> "" && $game["hscore"] == $game["vscore"]) {
          $output .= '<span class="pick_win">'. $teams[$game["vid"]]->tm_abbrev .'<br/>@'. $teams[$game["hid"]]->tm_abbrev .'</span>';
          
        }
        elseif ($game["pick"] == $game["vid"] && $game["vscore"] < $game["hscore"]) {
          $output .= '<span class="pick_loss">'. $teams[$game["vid"]]->tm_abbrev .'</span><br/>@'. $teams[$game["hid"]]->tm_abbrev;
        }
        elseif ($game["pick"] == $game["hid"] && $game["hscore"] < $game["vscore"]) {
          $output .= $teams[$game["vid"]]->tm_abbrev .'<br/>@<span class="pick_loss">'. $teams[$game["hid"]]->tm_abbrev .'</span>';
        }
        elseif ($game["pick"] == $game["hid"]) {
          $output .= $teams[$game["vid"]]->tm_abbrev .'<br/>@<b>'. $teams[$game["hid"]]->tm_abbrev .'</b>';
        }
        elseif ($game["pick"] == $game["vid"]) {
          $output .= '<b>'. $teams[$game["vid"]]->tm_abbrev .'</b><br/>@'. $teams[$game["hid"]]->tm_abbrev;
        }
      } 
      else {
        $output .= $teams[$game["vid"]]->tm_abbrev .'<br/>@'. $teams[$game["hid"]]->tm_abbrev;
      }
      $output .= "</div>";
    }
    $output .= "</td></tr>";
  }
  $output .= "</table></div>";
  
  print theme('page', $output);
}

function page_weeklypicks($league, $week_id) {
  //drupal_set_message('page_weeklypicks('. $league->name .','. $week_id .')');
  
  global $user;

  $flip = array('even' => 'odd', 'odd' => 'even');
  $class = 'even';

  $week = get_weeks($week_id);
  //if ( $week[$week_id]['week_past']==0 ) {
  //  drupal_set_title($week[$week_id]['name'] .' picks are not locked yet');
  //  print theme('page', 'Please wait until the first game begins this week ('. $week[$week_id]['firstgame'].' EST)');
  //  return;
  // }
  
  $output = '<div class="pickem">Sorted by this week\'s scores<table><tr><th>the Players</th>';
  $gids = array();
  $teams = get_teams();
  $games = get_games($week_id);
  foreach ($games as $g => $g_data) {
    $output .= '<th>'. $teams[$g_data->v_id]->tm_abbrev ."<br/>@". $teams[$g_data->h_id]->tm_abbrev .'</th>';
    if ($g_data->h_score > $g_data->v_score) {
      $gids[$g] = $g_data->h_id;
    }
    elseif ($g_data->v_score > $g_data->h_score) {
      $gids[$g] = $g_data->v_id;
    } 
    else {
      $gids[$g] = 0;
    }
  }
  $output .= '</tr>';
  
  $totals = get_user_totals($league->lid, $week_id); //sorted by overall score
  $gamepicks = get_game_picks($league->lid, $week_id);
  
  foreach ($totals as $uid => $user_totals) {
    $class=$flip[$class];
    $output .= '<tr class="'. $class .'"><td class="users">'. $user_totals['name'] .'</td>';
    foreach ($gids as $gid => $winnerid) {
      if (isset ($gamepicks[$gid][$uid]) && $gamepicks[$gid][$uid] == $winnerid && $winnerid != 0) {
        $output .= '<td class="win">'. $teams[$gamepicks[$gid][$uid]]->tm_abbrev .'</td>';
      }
      elseif (isset ($gamepicks[$gid][$uid]) && $gamepicks[$gid][$uid] != $winnerid && $winnerid != 0) {
        $output .= '<td class="loss">'. $teams[$gamepicks[$gid][$uid]]->tm_abbrev .'</td>';
      } 
      else {
        if ($week[$week_id]['week_past'] == 1 || $uid == $user->uid) {
          $output .= '<td>'. $teams[$gamepicks[$gid][$uid]]->tm_abbrev .'</td>';
        } 
        else {
          if (isset ($gamepicks[$gid][$uid])) {
            $output .= '<td>X</td>';
          } 
          else {
            $output .= '<td>&nbsp;</td>';
          }
        }
      }
    }
    $output .= '</tr>';
  }

  $output .= '</table></div>';

  drupal_set_title($week[$week_id]['name'] .' Pick Summary');
  print theme('page', $output);
}

function page_standings($league) {

  drupal_set_title("Standings");

  $totals = get_user_totals($league->lid, 0);
  $weeks = get_weeks(0, 'all');

  $flip = array('even' => 'odd', 'odd' => 'even');
  $class = 'even';

  $output = '<div class="pickem">Click on week numbers to see weekly pick summary.<table class="standings"><tr><th>&nbsp;</th>';
  $wk_summary = array();
  $output .= '<th colspan="2">TOT</th>';
  foreach ($weeks as $w => $w_data) {
    $output .= '<th class="week-numbers">'. l($w, 'pickem/'. $league->lid ."/weeklypicks/$w") .'</th>';
    $max = 0;
    $min = 100;
    foreach ($totals as $picker => $user_totals) {
      if ($user_totals[$w] > $max) {
        $max = $user_totals[$w];
      }
      if ($user_totals[$w] < $min && isset($user_totals[$w])) {
        $min = $user_totals[$w];
      }
    }
    $wk_summary[] = array(
      "name" => $w,
      "max" => $max,
      "min" => $min
    );
  }
  $output .= "</tr>";

  $high = 0;
  $last_total = 10000;
  $ordinal = 0;
  foreach ($totals as $picker => $user_totals) {
    if ($user_totals['total'] < $last_total) {
      $ordinal++;
      $last_total = $user_totals['total'];
    }
    $class = $flip[$class];
    $output .= '<tr class="'. $class .'">';
    $output .= '<th>'. $ordinal .'.&nbsp;&nbsp;'. $user_totals['name'] .'</th>';
    if ($high == 0 || $high == $user_totals['total']) {
      $output .= '<td>'. $user_totals['total'] .'</td><td>&nbsp;</td>';
      $high = $user_totals['total'];
    } 
    else {
      $output .= '<td>'. $user_totals['total'] .'</td><td>+'. ($high - $user_totals['total']) .'</td>';
    }
    foreach ($wk_summary as $wk) {
      if ($user_totals[$wk["name"]] == $wk["min"] && $wk["min"] <> $wk["max"]) {
        $output .= '<td class="weekly-low">'. $user_totals[$wk["name"]] .'</td>';
      }
      elseif ($user_totals[$wk["name"]] == $wk["max"] && $wk["min"] <> $wk["max"]) {
        $output .= '<td class="weekly-high">'. $user_totals[$wk["name"]] .'</td>';
      } 
      else {
        $output .= '<td>'. $user_totals[$wk["name"]] .'</td>';
      }
    }
    $output .= "</tr>";
  }
  $output .= '</table></div>';

  print theme('page', $output);
}


function page_my_leagues() {
  global $_pickem_my_leagues;
  drupal_set_title("League Dashboard");

  if ( count($_pickem_my_leagues) == 1 ) {
    foreach ($_pickem_my_leagues as $l) {
      drupal_goto("pickem/" . $l->lid);
    }
  }

  $o = '<div class="pickem"><table class="league-nav">';

  if (module_exists("countdowntimer")) {
    $cur_w = get_current_week(true); 
    if ( $cur_w['firstgame_date'] != '' ) {
      $timer = '<span class="warning">'. get_countdown_timer($cur_w) .'</span>';
      $o .= '<tr><td colspan="2">'. $timer .'</td></tr>';
    }
  }
  
  foreach ($_pickem_my_leagues as $l) {
    $o .= '<tr><td class="col1">'. theme('league_nav', $l, 'yes') .'</td><td class="col2">'. theme('league_leaders', $l->lid) .'</td></tr>'; 
  }
  $o .= '</table></div>';
  print theme('page', $o); 
}

function page_league($league) {
  drupal_set_title('League Dashboard');
  
  $o  = '<div class="pickem"><table class="league-nav">';
  $o .= '<tr><td class="col1">'. theme('league_nav', $league) .'</td><td class="col2">'. theme('league_messages', $league) .'</td></tr>';
  $o .= '<tr><td>'. theme('league_leaders', $league->lid) .'</td>';
  
  if ( variable_get('pickem_use_espn', 0) == 0 ) {
    $o .= '<td>'. theme('this_weeks_games') .'</td></tr></table></div>';
  }
  else {
    $o .= '<td>'. theme('this_weeks_games_scrape') .'</td></tr></table></div>';
  }
    
  
  print theme('page', $o);  
}

function theme_league_nav($league, $multileague='no') {
    $o = '';
    $o .=  '<ul>';
    $o .= '<li>'. l('My Picks', 'pickem/'. $league->lid .'/mypicks') .'</li>';
    $o .= '<li>'. l('Standings', 'pickem/'. $league->lid .'/standings') .'</li>';
    if ( $league->rules_node_id != 0 ) {
      $o .= '<li>'. l('Rules and Regs', 'node/'. $league->rules_node_id) .'</li>';
    }
    if ( $league->forum_id != 0 ) {
      $o .= '<li>'. l('Talk and Taunting', 'forum/'. $league->forum_id) .'</li>';
    }
    $o .= '<li>Research<ul>';
    $o .= '<li>'. l('Schedule Grid', 'pickem/grid') .'</li>';
    if (module_exists("open_flash_chart_api")) {
      $o .= '<li>'. l('High/Low Chart', 'pickem/'. $league->lid .'/chart1') .'</li>';
      $o .= '<li>'. l('Team Pickability Chart', 'pickem/'. $league->lid .'/chart2') .'</li>';
    }
    $o .= '<li>'. l('Team Win-Loss Stats', 'pickem/team_stats') .'</li>';

    $o .= '</ul></li></ul>';
    
    if ( $multileague == 'yes' ) {
      return theme('dash', $league->name, $o, 'main', l($league->name, 'pickem/'. $league->lid));
    } 
    else {
      return theme('dash', $league->name, $o);
    }
}

function theme_league_messages($league) {
  //drupal_set_message('theme_league_messages');
  
  $post_link = '/node/add/forum/'. $league->forum_id;
  $output = '<a href="'. $post_link .'">Post new forum topic.</a><ul>';

  $cur_w = get_current_week(true);
  if ( $cur_w['firstgame_date'] != '' ) {
    if ( $cur_w['dow'] <> "Sunday" ) {
      $output .= '<li class="warning">Warning: The first game is on <span style="text-decoration:underline;">'. strtoupper($cur_w['dow']) .'</span>.</li>';
    }
    if (module_exists("countdowntimer")) {
      $output .= '<li class="warning">'. get_countdown_timer($cur_w) .'</span></li>';
    }
  }


  $sql = db_rewrite_sql("SELECT n.nid, n.title, l.comment_count, l.last_comment_timestamp, u.name, c.cid, c.comment, c.subject comment_subject, cu.name comment_name, c.timestamp comment_timestamp FROM {node} n INNER JOIN {node_comment_statistics} l ON n.nid = l.nid inner join {users} u on u.uid=n.uid inner join {term_node} tn on tn.nid=n.nid left outer join {comments} c on c.nid=n.nid left outer join {users} cu on cu.uid=c.uid WHERE n.status = 1 AND n.type = 'forum' and tn.tid=%d ORDER BY GREATEST(n.created, c.timestamp) DESC");
  $result = db_query($sql, $league->forum_id);
  
  $i = 1;
  $content='';
  while ($node = db_fetch_object($result)) {
    if ( $i > 4 ) {
      break;
    }
    $i++;
    if ( $node->comment ) {
      $content .= '<li>'. l($node->comment_subject .' - '. $node->comment_name .' <Re: '. $node->title .'>', 'node/'. $node->nid  )  .  ' ('. format_date($node->comment_timestamp, 'small') .') <a href="/comment/reply/'. $node->nid .'/'. $node->cid .'">-Reply</a></li>';
    } 
    else {
      $content .= '<li>'. l($node->title .' - '. $node->name, 'node/'. $node->nid  )  .' ('. format_date($node->last_comment_timestamp, 'small') .') <a href="/comment/reply/'. $node->nid .'/#comment-form">-Reply</a></li>';
    }
  }
  
  if ( $content == '' ) {
    $content = "<li>None</li>";
  }

  $output .= $content;
  $output .= '</ul>';
  
  return theme('dash', 'Messages', $output);
}

function theme_dash($title, $content, $region='main', $link=NULL) {
  if ( isset($link) ) {
    $output = '<div class="dash"><div class="title">'. $link .'</div><div>'. $content .'</div></div>';
  } 
  else {
    $output = '<div class="dash"><div class="title">'. $title .'</div><div>'. $content .'</div></div>';
  }
  return $output;
} 

function theme_league_leaders($league_id) {
  //drupal_set_message('theme_league_leaders');
  
  $totals = get_user_totals($league_id); //sorted by overall score
  $title = 'Leaders';
  $content = '<table class="league-leaders">';
  foreach ($totals as $uid => $totalinfo) {
    $content .= '<tr><td>'. $totalinfo['total'] .'</td><td><a href="/user/'. $uid .'">'. $totalinfo['name'] .'</a></td></tr>';
  }
  $content .= '</table>';
  return theme('dash', $title, $content);
}

function theme_this_weeks_games() {
  $teams = get_teams();
  $cur_w = get_current_week(false); 
  
  if ( $cur_w['wid'] != "" ) {
    $games = get_games($cur_w['wid']);
  
    $content = '<table class="weeks-games">';
    $content .= '<tr><th colspan="2">Visitor</th><th colspan="2">Home</th></tr>';
    foreach ($games as $gid => $row) {
      //$content.=$teams[$row->v_id]['abbrev'] ." vs ". $teams[$row->h_id]['abbrev'] . "<br/>";
      $content .= '<tr><td class="team-abbrev">'. $teams[$row->v_id]->abbrev .'</td><td class="score">'. $row->v_score .'</td><td class="team-abbrev">'. $teams[$row->h_id]->abbrev .'</td><td class="score">'. $row->h_score .'</td></tr>';
    }
    $content .= '</table>';
    
    $title = 'NFL Week '. $cur_w['wid'];
    $content = '<div>'. $content .'</div>';
    return theme('dash', $title, $content);
  } 
  else {
    return theme('dash', 'This Weeks Scores', '<table><td>Not Yet Available</td></table>');
  }
}

function theme_this_weeks_games_scrape($cache_reset = FALSE) {
  // get scores from espn mobile

  // 10 minute cache for the scrape
  if (!$cache_reset && ($cache = cache_get('pickem_games_scrape', 'cache')) && $cache->expire > time() && !empty($cache->data)) {
    $raw = unserialize($cache->data);
  } 
  else {
    $url = "http://mobileapp.espn.go.com/nfl/mp/redesign/scoreboard?markupType=XHTML";
    $useragent="Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.1) Gecko/20061204 Firefox/2.0.0.1";
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_TIMEOUT, 120);
    curl_setopt($ch, CURLOPT_USERAGENT, $useragent);
  
    $raw = curl_exec($ch);
    curl_close($ch);
    cache_set('pickem_games_scrape', serialize($raw), 'cache', time() + (10*60) );
  }

  $pattern = '/<p class="header" ><b>(.*)<\/b><\/p>.*<div class="contentBlock">(.*)<\/div>/sU';
  if ( preg_match($pattern, $raw, $matches) > 0 ) {
    $title = $matches[1];
    $content = $matches[2];
  } 
  else {
    $title = "No Games Found";
    $content = "";    
  }
    
  return theme('dash', $title, $content);
}

function page_team_stats() {
  drupal_set_title('Team Stats');
  
  $o  = '<div class="pickem">' . theme('team_stats') . '</div>';
  
  print theme('page', $o);  
}

function theme_team_stats() {
  $teams = get_teams();
  foreach ($teams as $tid => $d) {
    $d->wins = 0;
    $d->losses = 0;
    $d->ties = 0;
    $d->games_played = 0;
    $d->win_percent = 0.0;
    $d->pts_for = 0;
    $d->pts_against = 0;
  }
  
  $games = get_games();
  foreach ($games as $gid => $row) {
    if ( ! isset($row->h_score) || ! isset($row->v_score) ) {
      continue;  
    }
    
    if ( $row->h_score > $row->v_score ) {
      $teams[$row->h_id]->wins++;
      $teams[$row->v_id]->losses++;
    }
    elseif ( $row->h_score < $row->v_score ) {
      $teams[$row->v_id]->wins++;
      $teams[$row->h_id]->losses++;
    }
    elseif ( $row->h_score == $row->v_score ) {
      $teams[$row->v_id]->ties++;
      $teams[$row->h_id]->ties++;
    }
    $teams[$row->h_id]->games_played++;
    $teams[$row->v_id]->games_played++;
    
    $teams[$row->h_id]->win_percent = $teams[$row->h_id]->wins / ( $teams[$row->h_id]->wins + $teams[$row->h_id]->losses );
    $teams[$row->v_id]->win_percent = $teams[$row->v_id]->wins / ( $teams[$row->v_id]->wins + $teams[$row->v_id]->losses );
    
    $teams[$row->v_id]->pts_for += $row->v_score;
    $teams[$row->v_id]->pts_against += $row->h_score;

    $teams[$row->h_id]->pts_for += $row->h_score;
    $teams[$row->h_id]->pts_against += $row->v_score;
    
  }

  // sort
  uasort($teams, "sort_team_stats");
  // render team data

  $rows = array();
  foreach ($teams as $tid => $d) {
    $rows[] = array(
      $teams[$tid]->tm_city . ' ' . $teams[$tid]->tm_name, 
      array('data'=>$teams[$tid]->wins, 'style'=>'width:10px;'), 
      array('data'=>$teams[$tid]->losses, 'style'=>'width:10px;'), 
      array('data'=>$teams[$tid]->ties, 'style'=>'width:10px;'), 
      sprintf("%.3F",$teams[$tid]->win_percent),

      array('data'=>$teams[$tid]->pts_for, 'style'=>'width:10px;'), 
      array('data'=>$teams[$tid]->pts_against, 'style'=>'width:10px;'), 
      );
  }
  
  $header = array(t('Team'), t('W'), t('L'), t('T'), t('PCT'), t('PF'), t('PA'));
  
  $o = theme('table', $header, $rows, array('style'=>'width:400px;') );
  
  return $o;
} 

function sort_team_stats($a, $b) {
  if ($a->win_percent > $b->win_percent) {
    return -1;
  } 
  else if ($a->win_percent < $b->win_percent) {
    return 1;
  } 
  else {
   return 0;
  }
}


function stream_logo() {
  header("content-type: image/gif");
  
  $full_path = drupal_get_path('module', 'pickem') .'/nfl_logos';
  $files = array();
  if ( $dir = opendir($full_path) ) {
    while (false !== ($file = readdir($dir))) {
      if (preg_match("/\.gif$/", "$file")) {
        $files[] = $file;
      }

    }
    closedir($dir);
  } 
  print file_get_contents($full_path .'/'. $files[array_rand($files)]);
}


function chart1($league, $user=NULL) {
  drupal_set_title('Charts');
  $g = new open_flash_chart_api();
  
  if ( isset($user) ) {
    $g->set_title( $user->name .': '. t('Weekly Points High/Low Chart'), '{font-size: 20px;}' );
  } 
  else {
    $g->set_title( t('Weekly Points High/Low Chart'), '{font-size: 20px;}' );
  }
  
  $g->set_width('100%');
  $g->set_height('480');
  
  $weeks = get_totals_by_week($league->lid);

  $b = array();
  foreach ($weeks as $w) {
    if ( $w['count'] == '' ) {
      $b[] = 'null';
    } 
    else {
      $b[] = $w['total'] / $w['count'];
    }
  }
  $g->set_data($b);
  $g->line_dot( 2, 4, '#008000', 'League AVG', 12 );
 
  if ( isset($user) ) {
    $ut = get_user_totals($league->lid, 0);
    $c = array();
    foreach ($weeks as $w) {
      if ( $ut[$user->uid][$w['name']] == '' ) {
        $c[] = 'null';
      } 
      else {
        $c[] = $ut[$user->uid][$w['name']];
      }
    }
    $g->set_data($c);
    $g->line_hollow( 2, 5, '#000080', $ut[$user->uid]['name'], 12 );
  }
 
   $a = array();
  foreach ($weeks as $w) {
    if ( $w['max'] == '' ) {
      $a[] = new candle('null', 'null', 'null', 'null');
    } 
    else {
      $a[] = new candle($w['max'], $w['min'], $w['max'], $w['min']);
    }
  }
  $g->candle( $a, 70, 1, '#800000', 'High/Low', 12 );


  // X axis:
  $weeks = get_weeks();
  $x_labels = array();
  foreach ($weeks as $w => $w_data) {
    $x_labels[] = $w;
  }
  $g->set_x_labels( $x_labels );
  $g->set_x_legend( 'Week', 12);
  
  $g->set_y_max( 16 );
  $g->y_label_steps( 8 );
  $g->set_y_legend( 'Points', 12);
  
  $g->set_bg_colour('0xDFFFDF');
  //echo $g->render();  
  
  $g->set_tool_tip( '#x_legend# #x_label# (#val#)' );

  $o = '<div class="pickem">'. $g->render('js');
  
  $users = get_users($league->lid);
  foreach ($users as $u) {
    $o .= '<span class="user-list-horiz">';
    $name = $u['name'];
    $name = str_replace(' ', '&nbsp;', $name);
    if ( $user->uid == $u['uid'] ) {
      $o .= $name;
    } 
    else {
      $o .= l($name, 'pickem/'. $league->lid .'/chart1/'. $u['uid'], array('html' => TRUE));
    }
    $o .= '</span>';
  }
  $o .= '</div>';
  print theme('page', $o); 
  
}



function chart2($league, $sort_by='win_lose') {
  drupal_set_title('Charts');
  $g = new open_flash_chart_api();
  $g->set_title( t('Team Pickability (Regular Season)'), '{font-size: 20px;}' );
  $g->set_width('100%');
  $g->set_height('480');

  $teams = get_team_totals($league->lid, $sort_by);
  $x_labels = array();
  $a = array();
  foreach ($teams as $tid => $team_data) {
    $a[] = $team_data['pickability'];
    $x_labels[] = $team_data['abbrev'];
  }
  $g->set_data($a);
  $g->area_hollow( 2, 3, 25, '#000080', 'Correctly Picked', 12);

  $a = array();
  foreach ($teams as $tid => $team_data) {
    $a[] = $team_data['pickability_w'];
  }
  $g->set_data($a);
  $g->area_hollow( 2, 3, 25, '#800080', 'Correctly Picked To Win', 12);


  $g->set_x_labels( $x_labels );
  $g->set_x_label_style( 12, '#000000', 2);

  $g->set_x_legend( 'Percent that a team is correctly picked', 12);
  
  $g->set_y_max( 100 );
  $g->y_label_steps( 10 );
  $g->set_y_legend( 'Percent', 12);
  
  $g->set_bg_colour('0xDFFFDF');
  //echo $g->render();  
  
  $g->set_tool_tip( '#x_label# (#val#)' );

  $o = $g->render('js');
  
  if ($sort_by == 'to_win' ) {
    $o .= l('Sort By "Correctly Picked"', 'pickem/'. $league->lid .'/chart2/win_lose', array('html' => TRUE));
  } 
  else {
    $o .= l('Sort By "Correctly Picked To Win"', 'pickem/'. $league->lid .'/chart2/to_win', array('html' => TRUE));
  }
  
  print theme('page', $o); 
}

function email_warning($user, $week_id, $firstgame, $missing_picks, $league_id) {

  $headers['Content-Type'] = 'text/plain; charset=UTF-8; format=flowed';
  //$headers['Content-Type'] = 'text/html; charset=UTF-8;';

  $subject = 'NFL Pickem: Week'. $week_id .' picks due!';
  $body = "Picks Due Before: $firstgame (EST)\n\nJust a reminder, you're missing $missing_picks picks for week $week_id\n\nhttp://nfl.vandervortsweb.com/pickem/". $league_id ."/picks/". $week_id;

  $from = variable_get('pickem_commisioner_email', '');
  $headers['From'] = $from;
  $headers['Bcc'] = $from;
  
  $to = $user->name .' <'. $user->mail .'>';

  $params = array();
  $params['headers'] = $headers;
  $params['subject'] = $subject;
  $params['body'] = $body;

  // $module, $key, $to, $language, $params = array(), $from = NULL, $send = TRUE
  $message = drupal_mail('email_warning', 'notice', $to, language_default(), $params);
  if ($message['result'] == 1) {
    watchdog('pickem', $user->name .": Week $wid Warning");
  }
  else {
    watchdog('pickem', 'Error Sending '.  $user->name .": Week $wid Warning");
  }

}

/*
  implementation of hook_mail
*/
function email_warning_mail($key, &$message, $params) {
  switch ($key) {
    case 'notice':
      $message['headers'] = $params['headers'];
      $message['subject'] = $params['subject'];
      $message['body'] = $params['body'];
      break;
  }
}


// Requires the countdowntimer module
function get_countdown_timer($current_week) {

$o = <<<EOD
Reminder: Week {$current_week['wid']} picks due in
<span class="countdowntimer">
<span style="display:none" class="datetime">{$current_week['firstgame_xml']}</span>
<span style="display:none" class="format_txt">%days% days + %hours%:%mins%:%secs%(%dow%)</span>
</span>
EOD;

return $o;
}

function pickem_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      // If $op is "list", we just need to return a list of block descriptions.
      // This is used to provide a list of possible blocks to the administrator,
      // end users will not see these descriptions.
      // A block can provide default settings. In this case we'll enable the 
      // block and make it visible only on the 'node/*' pages. 
      $blocks[0] = array(
        'info'       => t('My Leagues'),
        'status'     => TRUE,
        'weight'     => 0,
        'visibility' => 1,
        'pages'      => 'pickem/*',
      );
      return $blocks;
    case 'configure':
      // If $op is "configure", we need to provide the administrator with a
      // configuration form. The $delta parameter tells us which block is being
      // configured. In this example, we'll allow the administrator to customize
      // the text of the first block.
      $form = array();
      if ($delta == 0) {
        // All we need to provide is a text field, Drupal will take care of
        // the other block configuration options and the save button.
        //$form['block_example_string'] = array(
        //  '#type' => 'textfield',
        //  '#title' => t('Block contents'),
        //  '#size' => 60,
        //  '#description' => t('This string will appear in the example block.'),
        //  '#default_value' => variable_get('block_example_string',  t('Some example content.')),
        //);
      }
      return $form;
    case 'save':
      // If $op is "save", we need to save settings from the configuration form.
      // Since the first block is the only one that allows configuration, we
      // need to check $delta to make sure we only save it.
      //if ($delta == 0) {
        // Have Drupal save the string to the database.
      //  variable_set('block_example_string', $edit['block_example_string']);
      //}
      //return;
    case 'view': default:
      switch ($delta) {
        case 0:
          // The subject is displayed at the top of the block. Note that it
          // should be passed through t() for translation.
          $block['subject'] = t('My Leagues');
          // The content of the block is typically generated by calling a custom
          // function.
          
          
          $block['content'] = get_league_switcher();
          
          
          break;
      }
      return $block;
  }
}

function get_league_switcher() {
  $leagues = get_my_leagues();
  $o = '';
  foreach ($leagues as $l) {
    if ( arg(1) == $l->lid ) {
      $o.=l('&raquo; '.$l->name, 'pickem/'. $l->lid, array('html'=>TRUE)) .'<br/>';
    }
    else {
      $o.=l($l->name, 'pickem/'. $l->lid) .'<br/>';
    }
  }
  return $o;  
}


function league_access($string, $account = NULL) {
  drupal_set_message('league_access');
  
  global $user;

  if (is_null($account)) {
    $account = $user;
  }

  // Need play pickem first
  if ( user_access('play pickem', $account) == FALSE ) {
    return FALSE;
  }
  
  if ( $string == 'league access' ) {
    $leagues = get_my_leagues($account);
    foreach ($leagues as $l) {
      if ( arg(1) == $l->lid ) {
        return TRUE;
      }
    }
  }
  return FALSE;
}
